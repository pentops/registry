// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: j5/registry/v1/topic/builder.proto

package registry_tpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BuilderRequestTopic_Publish_FullMethodName  = "/j5.registry.v1.topic.BuilderRequestTopic/Publish"
	BuilderRequestTopic_BuildAPI_FullMethodName = "/j5.registry.v1.topic.BuilderRequestTopic/BuildAPI"
)

// BuilderRequestTopicClient is the client API for BuilderRequestTopic service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BuilderRequestTopicClient interface {
	Publish(ctx context.Context, in *PublishMessage, opts ...grpc.CallOption) (*emptypb.Empty, error)
	BuildAPI(ctx context.Context, in *BuildAPIMessage, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type builderRequestTopicClient struct {
	cc grpc.ClientConnInterface
}

func NewBuilderRequestTopicClient(cc grpc.ClientConnInterface) BuilderRequestTopicClient {
	return &builderRequestTopicClient{cc}
}

func (c *builderRequestTopicClient) Publish(ctx context.Context, in *PublishMessage, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, BuilderRequestTopic_Publish_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *builderRequestTopicClient) BuildAPI(ctx context.Context, in *BuildAPIMessage, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, BuilderRequestTopic_BuildAPI_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BuilderRequestTopicServer is the server API for BuilderRequestTopic service.
// All implementations must embed UnimplementedBuilderRequestTopicServer
// for forward compatibility
type BuilderRequestTopicServer interface {
	Publish(context.Context, *PublishMessage) (*emptypb.Empty, error)
	BuildAPI(context.Context, *BuildAPIMessage) (*emptypb.Empty, error)
	mustEmbedUnimplementedBuilderRequestTopicServer()
}

// UnimplementedBuilderRequestTopicServer must be embedded to have forward compatible implementations.
type UnimplementedBuilderRequestTopicServer struct {
}

func (UnimplementedBuilderRequestTopicServer) Publish(context.Context, *PublishMessage) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Publish not implemented")
}
func (UnimplementedBuilderRequestTopicServer) BuildAPI(context.Context, *BuildAPIMessage) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuildAPI not implemented")
}
func (UnimplementedBuilderRequestTopicServer) mustEmbedUnimplementedBuilderRequestTopicServer() {}

// UnsafeBuilderRequestTopicServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BuilderRequestTopicServer will
// result in compilation errors.
type UnsafeBuilderRequestTopicServer interface {
	mustEmbedUnimplementedBuilderRequestTopicServer()
}

func RegisterBuilderRequestTopicServer(s grpc.ServiceRegistrar, srv BuilderRequestTopicServer) {
	s.RegisterService(&BuilderRequestTopic_ServiceDesc, srv)
}

func _BuilderRequestTopic_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuilderRequestTopicServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BuilderRequestTopic_Publish_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuilderRequestTopicServer).Publish(ctx, req.(*PublishMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _BuilderRequestTopic_BuildAPI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuildAPIMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuilderRequestTopicServer).BuildAPI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BuilderRequestTopic_BuildAPI_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuilderRequestTopicServer).BuildAPI(ctx, req.(*BuildAPIMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// BuilderRequestTopic_ServiceDesc is the grpc.ServiceDesc for BuilderRequestTopic service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BuilderRequestTopic_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "j5.registry.v1.topic.BuilderRequestTopic",
	HandlerType: (*BuilderRequestTopicServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Publish",
			Handler:    _BuilderRequestTopic_Publish_Handler,
		},
		{
			MethodName: "BuildAPI",
			Handler:    _BuilderRequestTopic_BuildAPI_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "j5/registry/v1/topic/builder.proto",
}

const (
	BuildReplyTopic_J5BuildStatus_FullMethodName = "/j5.registry.v1.topic.BuildReplyTopic/J5BuildStatus"
)

// BuildReplyTopicClient is the client API for BuildReplyTopic service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BuildReplyTopicClient interface {
	J5BuildStatus(ctx context.Context, in *J5BuildStatusMessage, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type buildReplyTopicClient struct {
	cc grpc.ClientConnInterface
}

func NewBuildReplyTopicClient(cc grpc.ClientConnInterface) BuildReplyTopicClient {
	return &buildReplyTopicClient{cc}
}

func (c *buildReplyTopicClient) J5BuildStatus(ctx context.Context, in *J5BuildStatusMessage, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, BuildReplyTopic_J5BuildStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BuildReplyTopicServer is the server API for BuildReplyTopic service.
// All implementations must embed UnimplementedBuildReplyTopicServer
// for forward compatibility
type BuildReplyTopicServer interface {
	J5BuildStatus(context.Context, *J5BuildStatusMessage) (*emptypb.Empty, error)
	mustEmbedUnimplementedBuildReplyTopicServer()
}

// UnimplementedBuildReplyTopicServer must be embedded to have forward compatible implementations.
type UnimplementedBuildReplyTopicServer struct {
}

func (UnimplementedBuildReplyTopicServer) J5BuildStatus(context.Context, *J5BuildStatusMessage) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method J5BuildStatus not implemented")
}
func (UnimplementedBuildReplyTopicServer) mustEmbedUnimplementedBuildReplyTopicServer() {}

// UnsafeBuildReplyTopicServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BuildReplyTopicServer will
// result in compilation errors.
type UnsafeBuildReplyTopicServer interface {
	mustEmbedUnimplementedBuildReplyTopicServer()
}

func RegisterBuildReplyTopicServer(s grpc.ServiceRegistrar, srv BuildReplyTopicServer) {
	s.RegisterService(&BuildReplyTopic_ServiceDesc, srv)
}

func _BuildReplyTopic_J5BuildStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(J5BuildStatusMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuildReplyTopicServer).J5BuildStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BuildReplyTopic_J5BuildStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuildReplyTopicServer).J5BuildStatus(ctx, req.(*J5BuildStatusMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// BuildReplyTopic_ServiceDesc is the grpc.ServiceDesc for BuildReplyTopic service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BuildReplyTopic_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "j5.registry.v1.topic.BuildReplyTopic",
	HandlerType: (*BuildReplyTopicServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "J5BuildStatus",
			Handler:    _BuildReplyTopic_J5BuildStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "j5/registry/v1/topic/builder.proto",
}
