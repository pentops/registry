// Code generated by protoc-gen-go-o5-messaging. DO NOT EDIT.
// versions:
// - protoc-gen-go-o5-messaging 0.0.0
// source: j5/registry/v1/topic/builder.proto

package registry_tpb

import (
	context "context"
	messaging_j5pb "github.com/pentops/j5/gen/j5/messaging/v1/messaging_j5pb"
	messaging_pb "github.com/pentops/o5-messaging/gen/o5/messaging/v1/messaging_pb"
	o5msg "github.com/pentops/o5-messaging/o5msg"
)

// Service: BuilderRequestTopic
// Expose Request Metadata
func (msg *PublishMessage) SetJ5RequestMetadata(md *messaging_j5pb.RequestMetadata) {
	msg.Request = md
}
func (msg *PublishMessage) GetJ5RequestMetadata() *messaging_j5pb.RequestMetadata {
	return msg.Request
}

// Expose Request Metadata
func (msg *BuildAPIMessage) SetJ5RequestMetadata(md *messaging_j5pb.RequestMetadata) {
	msg.Request = md
}
func (msg *BuildAPIMessage) GetJ5RequestMetadata() *messaging_j5pb.RequestMetadata {
	return msg.Request
}

type BuilderRequestTopicTxSender[C any] struct {
	sender o5msg.TxSender[C]
}

func NewBuilderRequestTopicTxSender[C any](sender o5msg.TxSender[C]) *BuilderRequestTopicTxSender[C] {
	sender.Register(o5msg.TopicDescriptor{
		Service: "j5.registry.v1.topic.BuilderRequestTopic",
		Methods: []o5msg.MethodDescriptor{
			{
				Name:    "Publish",
				Message: (*PublishMessage).ProtoReflect(nil).Descriptor(),
			},
			{
				Name:    "BuildAPI",
				Message: (*BuildAPIMessage).ProtoReflect(nil).Descriptor(),
			},
		},
	})
	return &BuilderRequestTopicTxSender[C]{sender: sender}
}

type BuilderRequestTopicCollector[C any] struct {
	collector o5msg.Collector[C]
}

func NewBuilderRequestTopicCollector[C any](collector o5msg.Collector[C]) *BuilderRequestTopicCollector[C] {
	collector.Register(o5msg.TopicDescriptor{
		Service: "j5.registry.v1.topic.BuilderRequestTopic",
		Methods: []o5msg.MethodDescriptor{
			{
				Name:    "Publish",
				Message: (*PublishMessage).ProtoReflect(nil).Descriptor(),
			},
			{
				Name:    "BuildAPI",
				Message: (*BuildAPIMessage).ProtoReflect(nil).Descriptor(),
			},
		},
	})
	return &BuilderRequestTopicCollector[C]{collector: collector}
}

type BuilderRequestTopicPublisher struct {
	publisher o5msg.Publisher
}

func NewBuilderRequestTopicPublisher(publisher o5msg.Publisher) *BuilderRequestTopicPublisher {
	publisher.Register(o5msg.TopicDescriptor{
		Service: "j5.registry.v1.topic.BuilderRequestTopic",
		Methods: []o5msg.MethodDescriptor{
			{
				Name:    "Publish",
				Message: (*PublishMessage).ProtoReflect(nil).Descriptor(),
			},
			{
				Name:    "BuildAPI",
				Message: (*BuildAPIMessage).ProtoReflect(nil).Descriptor(),
			},
		},
	})
	return &BuilderRequestTopicPublisher{publisher: publisher}
}

// Method: Publish

func (msg *PublishMessage) O5MessageHeader() o5msg.Header {
	header := o5msg.Header{
		GrpcService:      "j5.registry.v1.topic.BuilderRequestTopic",
		GrpcMethod:       "Publish",
		Headers:          map[string]string{},
		DestinationTopic: "registry-build_request",
	}
	return header
}

func (send BuilderRequestTopicTxSender[C]) Publish(ctx context.Context, sendContext C, msg *PublishMessage) error {
	return send.sender.Send(ctx, sendContext, msg)
}

func (collect BuilderRequestTopicCollector[C]) Publish(sendContext C, msg *PublishMessage) {
	collect.collector.Collect(sendContext, msg)
}

func (publish BuilderRequestTopicPublisher) Publish(ctx context.Context, msg *PublishMessage) error {
	return publish.publisher.Publish(ctx, msg)
}

// Method: BuildAPI

func (msg *BuildAPIMessage) O5MessageHeader() o5msg.Header {
	header := o5msg.Header{
		GrpcService:      "j5.registry.v1.topic.BuilderRequestTopic",
		GrpcMethod:       "BuildAPI",
		Headers:          map[string]string{},
		DestinationTopic: "registry-build_request",
	}
	return header
}

func (send BuilderRequestTopicTxSender[C]) BuildAPI(ctx context.Context, sendContext C, msg *BuildAPIMessage) error {
	return send.sender.Send(ctx, sendContext, msg)
}

func (collect BuilderRequestTopicCollector[C]) BuildAPI(sendContext C, msg *BuildAPIMessage) {
	collect.collector.Collect(sendContext, msg)
}

func (publish BuilderRequestTopicPublisher) BuildAPI(ctx context.Context, msg *BuildAPIMessage) error {
	return publish.publisher.Publish(ctx, msg)
}

// Service: BuildReplyTopic
// Expose Request Metadata
func (msg *J5BuildStatusMessage) SetJ5RequestMetadata(md *messaging_j5pb.RequestMetadata) {
	msg.Request = md
}
func (msg *J5BuildStatusMessage) GetJ5RequestMetadata() *messaging_j5pb.RequestMetadata {
	return msg.Request
}

type BuildReplyTopicTxSender[C any] struct {
	sender o5msg.TxSender[C]
}

func NewBuildReplyTopicTxSender[C any](sender o5msg.TxSender[C]) *BuildReplyTopicTxSender[C] {
	sender.Register(o5msg.TopicDescriptor{
		Service: "j5.registry.v1.topic.BuildReplyTopic",
		Methods: []o5msg.MethodDescriptor{
			{
				Name:    "J5BuildStatus",
				Message: (*J5BuildStatusMessage).ProtoReflect(nil).Descriptor(),
			},
		},
	})
	return &BuildReplyTopicTxSender[C]{sender: sender}
}

type BuildReplyTopicCollector[C any] struct {
	collector o5msg.Collector[C]
}

func NewBuildReplyTopicCollector[C any](collector o5msg.Collector[C]) *BuildReplyTopicCollector[C] {
	collector.Register(o5msg.TopicDescriptor{
		Service: "j5.registry.v1.topic.BuildReplyTopic",
		Methods: []o5msg.MethodDescriptor{
			{
				Name:    "J5BuildStatus",
				Message: (*J5BuildStatusMessage).ProtoReflect(nil).Descriptor(),
			},
		},
	})
	return &BuildReplyTopicCollector[C]{collector: collector}
}

type BuildReplyTopicPublisher struct {
	publisher o5msg.Publisher
}

func NewBuildReplyTopicPublisher(publisher o5msg.Publisher) *BuildReplyTopicPublisher {
	publisher.Register(o5msg.TopicDescriptor{
		Service: "j5.registry.v1.topic.BuildReplyTopic",
		Methods: []o5msg.MethodDescriptor{
			{
				Name:    "J5BuildStatus",
				Message: (*J5BuildStatusMessage).ProtoReflect(nil).Descriptor(),
			},
		},
	})
	return &BuildReplyTopicPublisher{publisher: publisher}
}

// Method: J5BuildStatus

func (msg *J5BuildStatusMessage) O5MessageHeader() o5msg.Header {
	header := o5msg.Header{
		GrpcService:      "j5.registry.v1.topic.BuildReplyTopic",
		GrpcMethod:       "J5BuildStatus",
		Headers:          map[string]string{},
		DestinationTopic: "registry-status_reply",
	}
	if msg.Request != nil {
		header.Extension = &messaging_pb.Message_Reply_{
			Reply: &messaging_pb.Message_Reply{
				ReplyTo: msg.Request.ReplyTo,
			},
		}
	}
	return header
}

func (send BuildReplyTopicTxSender[C]) J5BuildStatus(ctx context.Context, sendContext C, msg *J5BuildStatusMessage) error {
	return send.sender.Send(ctx, sendContext, msg)
}

func (collect BuildReplyTopicCollector[C]) J5BuildStatus(sendContext C, msg *J5BuildStatusMessage) {
	collect.collector.Collect(sendContext, msg)
}

func (publish BuildReplyTopicPublisher) J5BuildStatus(ctx context.Context, msg *J5BuildStatusMessage) error {
	return publish.publisher.Publish(ctx, msg)
}
