// Code generated by protoc-gen-go-psm. DO NOT EDIT.

package github_spb

import (
	context "context"
	psm "github.com/pentops/protostate/psm"
	sqrlx "github.com/pentops/sqrlx.go/sqrlx"
)

// State Query Service for %sRepo
// QuerySet is the query set for the Repo service.

type RepoPSMQuerySet = psm.StateQuerySet[
	*GetRepoRequest,
	*GetRepoResponse,
	*ListReposRequest,
	*ListReposResponse,
	*ListRepoEventsRequest,
	*ListRepoEventsResponse,
]

func NewRepoPSMQuerySet(
	smSpec psm.QuerySpec[
		*GetRepoRequest,
		*GetRepoResponse,
		*ListReposRequest,
		*ListReposResponse,
		*ListRepoEventsRequest,
		*ListRepoEventsResponse,
	],
	options psm.StateQueryOptions,
) (*RepoPSMQuerySet, error) {
	return psm.BuildStateQuerySet[
		*GetRepoRequest,
		*GetRepoResponse,
		*ListReposRequest,
		*ListReposResponse,
		*ListRepoEventsRequest,
		*ListRepoEventsResponse,
	](smSpec, options)
}

type RepoPSMQuerySpec = psm.QuerySpec[
	*GetRepoRequest,
	*GetRepoResponse,
	*ListReposRequest,
	*ListReposResponse,
	*ListRepoEventsRequest,
	*ListRepoEventsResponse,
]

func DefaultRepoPSMQuerySpec(tableSpec psm.QueryTableSpec) RepoPSMQuerySpec {
	return psm.QuerySpec[
		*GetRepoRequest,
		*GetRepoResponse,
		*ListReposRequest,
		*ListReposResponse,
		*ListRepoEventsRequest,
		*ListRepoEventsResponse,
	]{
		QueryTableSpec: tableSpec,
		ListRequestFilter: func(req *ListReposRequest) (map[string]interface{}, error) {
			filter := map[string]interface{}{}
			return filter, nil
		},
		ListEventsRequestFilter: func(req *ListRepoEventsRequest) (map[string]interface{}, error) {
			filter := map[string]interface{}{}
			filter["owner"] = req.Owner
			filter["name"] = req.Name
			return filter, nil
		},
	}
}

type RepoQueryServiceImpl struct {
	db       sqrlx.Transactor
	querySet *RepoPSMQuerySet
	UnsafeRepoQueryServiceServer
}

var _ RepoQueryServiceServer = &RepoQueryServiceImpl{}

func NewRepoQueryServiceImpl(db sqrlx.Transactor, querySet *RepoPSMQuerySet) *RepoQueryServiceImpl {
	return &RepoQueryServiceImpl{
		db:       db,
		querySet: querySet,
	}
}

func (s *RepoQueryServiceImpl) GetRepo(ctx context.Context, req *GetRepoRequest) (*GetRepoResponse, error) {
	resObject := &GetRepoResponse{}
	err := s.querySet.Get(ctx, s.db, req, resObject)
	if err != nil {
		return nil, err
	}
	return resObject, nil
}

func (s *RepoQueryServiceImpl) ListRepos(ctx context.Context, req *ListReposRequest) (*ListReposResponse, error) {
	resObject := &ListReposResponse{}
	err := s.querySet.List(ctx, s.db, req, resObject)
	if err != nil {
		return nil, err
	}
	return resObject, nil
}

func (s *RepoQueryServiceImpl) ListRepoEvents(ctx context.Context, req *ListRepoEventsRequest) (*ListRepoEventsResponse, error) {
	resObject := &ListRepoEventsResponse{}
	err := s.querySet.ListEvents(ctx, s.db, req, resObject)
	if err != nil {
		return nil, err
	}
	return resObject, nil
}
