// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: o5/registry/github/v1/service/github_query.proto

package github_spb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GithubQueryServiceClient is the client API for GithubQueryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GithubQueryServiceClient interface {
	GetRepo(ctx context.Context, in *GetRepoRequest, opts ...grpc.CallOption) (*GetRepoResponse, error)
	ListRepos(ctx context.Context, in *ListReposRequest, opts ...grpc.CallOption) (*ListReposResponse, error)
	ListRepoEvents(ctx context.Context, in *ListRepoEventsRequest, opts ...grpc.CallOption) (*ListRepoEventsResponse, error)
}

type githubQueryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGithubQueryServiceClient(cc grpc.ClientConnInterface) GithubQueryServiceClient {
	return &githubQueryServiceClient{cc}
}

func (c *githubQueryServiceClient) GetRepo(ctx context.Context, in *GetRepoRequest, opts ...grpc.CallOption) (*GetRepoResponse, error) {
	out := new(GetRepoResponse)
	err := c.cc.Invoke(ctx, "/o5.registry.github.v1.service.GithubQueryService/GetRepo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *githubQueryServiceClient) ListRepos(ctx context.Context, in *ListReposRequest, opts ...grpc.CallOption) (*ListReposResponse, error) {
	out := new(ListReposResponse)
	err := c.cc.Invoke(ctx, "/o5.registry.github.v1.service.GithubQueryService/ListRepos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *githubQueryServiceClient) ListRepoEvents(ctx context.Context, in *ListRepoEventsRequest, opts ...grpc.CallOption) (*ListRepoEventsResponse, error) {
	out := new(ListRepoEventsResponse)
	err := c.cc.Invoke(ctx, "/o5.registry.github.v1.service.GithubQueryService/ListRepoEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GithubQueryServiceServer is the server API for GithubQueryService service.
// All implementations must embed UnimplementedGithubQueryServiceServer
// for forward compatibility
type GithubQueryServiceServer interface {
	GetRepo(context.Context, *GetRepoRequest) (*GetRepoResponse, error)
	ListRepos(context.Context, *ListReposRequest) (*ListReposResponse, error)
	ListRepoEvents(context.Context, *ListRepoEventsRequest) (*ListRepoEventsResponse, error)
	mustEmbedUnimplementedGithubQueryServiceServer()
}

// UnimplementedGithubQueryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGithubQueryServiceServer struct {
}

func (UnimplementedGithubQueryServiceServer) GetRepo(context.Context, *GetRepoRequest) (*GetRepoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRepo not implemented")
}
func (UnimplementedGithubQueryServiceServer) ListRepos(context.Context, *ListReposRequest) (*ListReposResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRepos not implemented")
}
func (UnimplementedGithubQueryServiceServer) ListRepoEvents(context.Context, *ListRepoEventsRequest) (*ListRepoEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRepoEvents not implemented")
}
func (UnimplementedGithubQueryServiceServer) mustEmbedUnimplementedGithubQueryServiceServer() {}

// UnsafeGithubQueryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GithubQueryServiceServer will
// result in compilation errors.
type UnsafeGithubQueryServiceServer interface {
	mustEmbedUnimplementedGithubQueryServiceServer()
}

func RegisterGithubQueryServiceServer(s grpc.ServiceRegistrar, srv GithubQueryServiceServer) {
	s.RegisterService(&GithubQueryService_ServiceDesc, srv)
}

func _GithubQueryService_GetRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRepoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GithubQueryServiceServer).GetRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/o5.registry.github.v1.service.GithubQueryService/GetRepo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GithubQueryServiceServer).GetRepo(ctx, req.(*GetRepoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GithubQueryService_ListRepos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListReposRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GithubQueryServiceServer).ListRepos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/o5.registry.github.v1.service.GithubQueryService/ListRepos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GithubQueryServiceServer).ListRepos(ctx, req.(*ListReposRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GithubQueryService_ListRepoEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRepoEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GithubQueryServiceServer).ListRepoEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/o5.registry.github.v1.service.GithubQueryService/ListRepoEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GithubQueryServiceServer).ListRepoEvents(ctx, req.(*ListRepoEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GithubQueryService_ServiceDesc is the grpc.ServiceDesc for GithubQueryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GithubQueryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "o5.registry.github.v1.service.GithubQueryService",
	HandlerType: (*GithubQueryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRepo",
			Handler:    _GithubQueryService_GetRepo_Handler,
		},
		{
			MethodName: "ListRepos",
			Handler:    _GithubQueryService_ListRepos_Handler,
		},
		{
			MethodName: "ListRepoEvents",
			Handler:    _GithubQueryService_ListRepoEvents_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "o5/registry/github/v1/service/github_query.proto",
}
