// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: o5/registry/github/v1/service/repo_query.proto

package github_spb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RepoQueryService_GetRepo_FullMethodName        = "/o5.registry.github.v1.service.RepoQueryService/GetRepo"
	RepoQueryService_ListRepos_FullMethodName      = "/o5.registry.github.v1.service.RepoQueryService/ListRepos"
	RepoQueryService_ListRepoEvents_FullMethodName = "/o5.registry.github.v1.service.RepoQueryService/ListRepoEvents"
)

// RepoQueryServiceClient is the client API for RepoQueryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RepoQueryServiceClient interface {
	GetRepo(ctx context.Context, in *GetRepoRequest, opts ...grpc.CallOption) (*GetRepoResponse, error)
	ListRepos(ctx context.Context, in *ListReposRequest, opts ...grpc.CallOption) (*ListReposResponse, error)
	ListRepoEvents(ctx context.Context, in *ListRepoEventsRequest, opts ...grpc.CallOption) (*ListRepoEventsResponse, error)
}

type repoQueryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRepoQueryServiceClient(cc grpc.ClientConnInterface) RepoQueryServiceClient {
	return &repoQueryServiceClient{cc}
}

func (c *repoQueryServiceClient) GetRepo(ctx context.Context, in *GetRepoRequest, opts ...grpc.CallOption) (*GetRepoResponse, error) {
	out := new(GetRepoResponse)
	err := c.cc.Invoke(ctx, RepoQueryService_GetRepo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repoQueryServiceClient) ListRepos(ctx context.Context, in *ListReposRequest, opts ...grpc.CallOption) (*ListReposResponse, error) {
	out := new(ListReposResponse)
	err := c.cc.Invoke(ctx, RepoQueryService_ListRepos_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repoQueryServiceClient) ListRepoEvents(ctx context.Context, in *ListRepoEventsRequest, opts ...grpc.CallOption) (*ListRepoEventsResponse, error) {
	out := new(ListRepoEventsResponse)
	err := c.cc.Invoke(ctx, RepoQueryService_ListRepoEvents_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RepoQueryServiceServer is the server API for RepoQueryService service.
// All implementations must embed UnimplementedRepoQueryServiceServer
// for forward compatibility
type RepoQueryServiceServer interface {
	GetRepo(context.Context, *GetRepoRequest) (*GetRepoResponse, error)
	ListRepos(context.Context, *ListReposRequest) (*ListReposResponse, error)
	ListRepoEvents(context.Context, *ListRepoEventsRequest) (*ListRepoEventsResponse, error)
	mustEmbedUnimplementedRepoQueryServiceServer()
}

// UnimplementedRepoQueryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRepoQueryServiceServer struct {
}

func (UnimplementedRepoQueryServiceServer) GetRepo(context.Context, *GetRepoRequest) (*GetRepoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRepo not implemented")
}
func (UnimplementedRepoQueryServiceServer) ListRepos(context.Context, *ListReposRequest) (*ListReposResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRepos not implemented")
}
func (UnimplementedRepoQueryServiceServer) ListRepoEvents(context.Context, *ListRepoEventsRequest) (*ListRepoEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRepoEvents not implemented")
}
func (UnimplementedRepoQueryServiceServer) mustEmbedUnimplementedRepoQueryServiceServer() {}

// UnsafeRepoQueryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RepoQueryServiceServer will
// result in compilation errors.
type UnsafeRepoQueryServiceServer interface {
	mustEmbedUnimplementedRepoQueryServiceServer()
}

func RegisterRepoQueryServiceServer(s grpc.ServiceRegistrar, srv RepoQueryServiceServer) {
	s.RegisterService(&RepoQueryService_ServiceDesc, srv)
}

func _RepoQueryService_GetRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRepoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepoQueryServiceServer).GetRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RepoQueryService_GetRepo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepoQueryServiceServer).GetRepo(ctx, req.(*GetRepoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RepoQueryService_ListRepos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListReposRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepoQueryServiceServer).ListRepos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RepoQueryService_ListRepos_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepoQueryServiceServer).ListRepos(ctx, req.(*ListReposRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RepoQueryService_ListRepoEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRepoEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepoQueryServiceServer).ListRepoEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RepoQueryService_ListRepoEvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepoQueryServiceServer).ListRepoEvents(ctx, req.(*ListRepoEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RepoQueryService_ServiceDesc is the grpc.ServiceDesc for RepoQueryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RepoQueryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "o5.registry.github.v1.service.RepoQueryService",
	HandlerType: (*RepoQueryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRepo",
			Handler:    _RepoQueryService_GetRepo_Handler,
		},
		{
			MethodName: "ListRepos",
			Handler:    _RepoQueryService_ListRepos_Handler,
		},
		{
			MethodName: "ListRepoEvents",
			Handler:    _RepoQueryService_ListRepoEvents_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "o5/registry/github/v1/service/repo_query.proto",
}
