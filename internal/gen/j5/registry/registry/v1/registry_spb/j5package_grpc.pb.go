// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: j5/registry/registry/v1/service/j5package.proto

package registry_spb

import (
	context "context"

	httpbody "google.golang.org/genproto/googleapis/api/httpbody"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DownloadService_DownloadImage_FullMethodName     = "/j5.registry.registry.v1.service.DownloadService/DownloadImage"
	DownloadService_DownloadSwagger_FullMethodName   = "/j5.registry.registry.v1.service.DownloadService/DownloadSwagger"
	DownloadService_DownloadJDef_FullMethodName      = "/j5.registry.registry.v1.service.DownloadService/DownloadJDef"
	DownloadService_DownloadClientAPI_FullMethodName = "/j5.registry.registry.v1.service.DownloadService/DownloadClientAPI"
)

// DownloadServiceClient is the client API for DownloadService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DownloadServiceClient interface {
	DownloadImage(ctx context.Context, in *DownloadImageRequest, opts ...grpc.CallOption) (*httpbody.HttpBody, error)
	DownloadSwagger(ctx context.Context, in *DownloadSwaggerRequest, opts ...grpc.CallOption) (*httpbody.HttpBody, error)
	DownloadJDef(ctx context.Context, in *DownloadJDefRequest, opts ...grpc.CallOption) (*httpbody.HttpBody, error)
	DownloadClientAPI(ctx context.Context, in *DownloadClientAPIRequest, opts ...grpc.CallOption) (*DownloadClientAPIResponse, error)
}

type downloadServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDownloadServiceClient(cc grpc.ClientConnInterface) DownloadServiceClient {
	return &downloadServiceClient{cc}
}

func (c *downloadServiceClient) DownloadImage(ctx context.Context, in *DownloadImageRequest, opts ...grpc.CallOption) (*httpbody.HttpBody, error) {
	out := new(httpbody.HttpBody)
	err := c.cc.Invoke(ctx, DownloadService_DownloadImage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *downloadServiceClient) DownloadSwagger(ctx context.Context, in *DownloadSwaggerRequest, opts ...grpc.CallOption) (*httpbody.HttpBody, error) {
	out := new(httpbody.HttpBody)
	err := c.cc.Invoke(ctx, DownloadService_DownloadSwagger_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *downloadServiceClient) DownloadJDef(ctx context.Context, in *DownloadJDefRequest, opts ...grpc.CallOption) (*httpbody.HttpBody, error) {
	out := new(httpbody.HttpBody)
	err := c.cc.Invoke(ctx, DownloadService_DownloadJDef_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *downloadServiceClient) DownloadClientAPI(ctx context.Context, in *DownloadClientAPIRequest, opts ...grpc.CallOption) (*DownloadClientAPIResponse, error) {
	out := new(DownloadClientAPIResponse)
	err := c.cc.Invoke(ctx, DownloadService_DownloadClientAPI_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DownloadServiceServer is the server API for DownloadService service.
// All implementations must embed UnimplementedDownloadServiceServer
// for forward compatibility
type DownloadServiceServer interface {
	DownloadImage(context.Context, *DownloadImageRequest) (*httpbody.HttpBody, error)
	DownloadSwagger(context.Context, *DownloadSwaggerRequest) (*httpbody.HttpBody, error)
	DownloadJDef(context.Context, *DownloadJDefRequest) (*httpbody.HttpBody, error)
	DownloadClientAPI(context.Context, *DownloadClientAPIRequest) (*DownloadClientAPIResponse, error)
	mustEmbedUnimplementedDownloadServiceServer()
}

// UnimplementedDownloadServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDownloadServiceServer struct {
}

func (UnimplementedDownloadServiceServer) DownloadImage(context.Context, *DownloadImageRequest) (*httpbody.HttpBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadImage not implemented")
}
func (UnimplementedDownloadServiceServer) DownloadSwagger(context.Context, *DownloadSwaggerRequest) (*httpbody.HttpBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadSwagger not implemented")
}
func (UnimplementedDownloadServiceServer) DownloadJDef(context.Context, *DownloadJDefRequest) (*httpbody.HttpBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadJDef not implemented")
}
func (UnimplementedDownloadServiceServer) DownloadClientAPI(context.Context, *DownloadClientAPIRequest) (*DownloadClientAPIResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadClientAPI not implemented")
}
func (UnimplementedDownloadServiceServer) mustEmbedUnimplementedDownloadServiceServer() {}

// UnsafeDownloadServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DownloadServiceServer will
// result in compilation errors.
type UnsafeDownloadServiceServer interface {
	mustEmbedUnimplementedDownloadServiceServer()
}

func RegisterDownloadServiceServer(s grpc.ServiceRegistrar, srv DownloadServiceServer) {
	s.RegisterService(&DownloadService_ServiceDesc, srv)
}

func _DownloadService_DownloadImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DownloadServiceServer).DownloadImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DownloadService_DownloadImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DownloadServiceServer).DownloadImage(ctx, req.(*DownloadImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DownloadService_DownloadSwagger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadSwaggerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DownloadServiceServer).DownloadSwagger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DownloadService_DownloadSwagger_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DownloadServiceServer).DownloadSwagger(ctx, req.(*DownloadSwaggerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DownloadService_DownloadJDef_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadJDefRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DownloadServiceServer).DownloadJDef(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DownloadService_DownloadJDef_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DownloadServiceServer).DownloadJDef(ctx, req.(*DownloadJDefRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DownloadService_DownloadClientAPI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadClientAPIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DownloadServiceServer).DownloadClientAPI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DownloadService_DownloadClientAPI_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DownloadServiceServer).DownloadClientAPI(ctx, req.(*DownloadClientAPIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DownloadService_ServiceDesc is the grpc.ServiceDesc for DownloadService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DownloadService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "j5.registry.registry.v1.service.DownloadService",
	HandlerType: (*DownloadServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DownloadImage",
			Handler:    _DownloadService_DownloadImage_Handler,
		},
		{
			MethodName: "DownloadSwagger",
			Handler:    _DownloadService_DownloadSwagger_Handler,
		},
		{
			MethodName: "DownloadJDef",
			Handler:    _DownloadService_DownloadJDef_Handler,
		},
		{
			MethodName: "DownloadClientAPI",
			Handler:    _DownloadService_DownloadClientAPI_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "j5/registry/registry/v1/service/j5package.proto",
}
